generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id         Int       @id @default(autoincrement())
  name       String    @unique(map: "name_UNIQUE") @db.VarChar(255)
  createTime DateTime  @default(now()) @map("create_time") @db.Timestamp(0)
  updateTime DateTime? @map("update_time") @db.Timestamp(0)
  meetings   Meeting[]

  @@map("customers")
}

model MeetingParticipant {
  id         Int                @id @default(autoincrement())
  createTime DateTime           @default(now()) @map("create_time") @db.Timestamp(0)
  updateTime DateTime?          @map("update_time") @db.Timestamp(0)
  hasJoined  Int                @default(0) @map("has_joined") @db.TinyInt
  answer     ParticipantAnswer?
  meetingId  Int                @map("meeting_id")
  userId     Int                @map("user_id")
  meeting    Meeting            @relation(fields: [meetingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_meeting_participants_meetings1")
  user       User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_meeting_participants_users1")

  @@index([meetingId], map: "fk_meeting_participants_meetings1_idx")
  @@index([userId], map: "fk_meeting_participants_users1_idx")
  @@map("meeting_participants")
}

model Meeting {
  id                  Int                  @id @default(autoincrement())
  title               String               @db.VarChar(255)
  createTime          DateTime             @default(now()) @map("create_time") @db.Timestamp(0)
  updateTime          DateTime?            @map("update_time") @db.Timestamp(0)
  startTime           DateTime?            @map("start_time") @db.Timestamp(0)
  finishTime          DateTime?            @map("finish_time") @db.Timestamp(0)
  description         String?              @db.VarChar(255)
  customerId          Int                  @map("customer_id")
  roomId              Int                  @map("room_id")
  meetingParticipants MeetingParticipant[]
  customer            Customer             @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_meetings_customers1")
  room                Room                 @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_meetings_rooms1")

  @@index([customerId], map: "fk_meetings_customers1_idx")
  @@index([roomId], map: "fk_meetings_rooms1_idx")
  @@map("meetings")
}

model Room {
  id         Int       @id @default(autoincrement())
  name       String    @unique(map: "email_UNIQUE") @db.VarChar(255)
  createTime DateTime  @default(now()) @map("create_time") @db.Timestamp(0)
  updateTime DateTime? @map("update_time") @db.Timestamp(0)
  roomCode   String    @unique(map: "room_code_UNIQUE") @map("room_code") @db.VarChar(255)
  meetings   Meeting[]

  @@map("rooms")
}

model Token {
  id         Int      @id @default(autoincrement())
  content    String   @db.VarChar(3000)
  createTime DateTime @default(now()) @map("create_time") @db.Timestamp(0)
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "fk_tokens_users")

  @@index([userId], map: "fk_tokens_users_idx")
  @@map("tokens")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique(map: "email_UNIQUE") @db.VarChar(255)
  password            String               @db.VarChar(32)
  createTime          DateTime             @default(now()) @map("create_time") @db.Timestamp(0)
  updateTime          DateTime?            @map("update_time") @db.Timestamp(0)
  role                UserRole             @default(User)
  firstName           String               @map("first_name") @db.VarChar(255)
  lastName            String               @map("last_name") @db.VarChar(255)
  meetingParticipants MeetingParticipant[]
  tokens              Token[]

  @@map("users")
}

enum UserRole {
  User
  Facility
  Admin
}

enum ParticipantAnswer {
  Confirmed
  Declined
  Tentative
}
